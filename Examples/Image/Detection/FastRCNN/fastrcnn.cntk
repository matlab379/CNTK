# Fast-RCNN configuration for CNTK
# For algorithm and details see http://arxiv.org/abs/1504.08083

command=Train:Test
#command=Write

deviceId = "Auto"
precision = "float"
parallelTrain = "false"
traceLevel = 1

rootDir = "." 
dataDir  = "$rootDir$/data/"
outputDir = "$rootDir$/Output"

modelPath = "$outputDir$/Fast-RCNN"
stderr = "$outputDir$/Fast-RCNN.log"

ImageH = 1000
ImageW = 1000
ImageC = 3

NumLabels = 21

NumTrainROIs = 64
TrainROIDim = 256               # $NumTrainROIs$ * 4 
TrainROILabelDim = 1344         # $NumTrainROIs$ * $NumLabels$

NumTestROIs = 200
TestROIDim = 800
TestROILabelDim = 4200

Train = {
    action = "train"
    
    BrainScriptNetworkBuilder = {
        imageShape = $ImageH$:$ImageW$:$ImageC$         # 1000:1000:3
        labelShape = $NumLabels$:$NumTrainROIs$         # 21:64
        ROIShape   = 4:$NumTrainROIs$                   # 4:64

        network     = BS.Network.Load ("AlexNet.89")
        pool1       = BS.Network.CloneFunction(network.features, network.pool1, parameters="constant")
        convLayers  = BS.Network.CloneFunction(network.pool1, network.conv5_y)
        fcLayers    = BS.Network.CloneFunction(network.pool3, network.h2_d)

        model (features, rois) = {
            featNorm = features - Constant (114)
            pool1Out = pool1 (featNorm)
            conv5Out = convLayers (pool1Out)
            roiOut   = ROIPooling (conv5Out, rois, (6:6))
            fcOut    = fcLayers (roiOut)
            W        = ParameterTensor((21:4096))
            b        = ParameterTensor(21, init='zero')
            z        = Times(W, fcOut) + b
        }.z

        features = Input (imageShape)
        roiLabels = Input (labelShape)
        rois = Input (ROIShape)

        z = model (features, rois)
        
        ce = NewCrossEntropyWithSoftmax(roiLabels, z, axis=1)
        errs = ClassificationError(roiLabels, z, axis=1)
        
        featureNodes    = (features:rois)
        labelNodes      = (roiLabels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (z)
    }

    SGD = {
        epochSize = 0
        minibatchSize = 2
        maxEpochs = 15
        
        learningRatesPerSample = 0.00005
        momentumAsTimeConstant = 0*5:1024 # was: 0.9 per MB 
        L2RegWeight = 0.0001
        dropoutRate = 0.5
        
        numMBsToShowResult = 50
    }

    reader = {
        randomize = false
        verbosity = 2
        deserializers = ({
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/tv2012pad.rois.txt"
            input = { rois = { dim = $TrainROIDim$ ; format = "dense" } }
        }:{
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/tv2012pad.roilabels.txt"
            input = { roiLabels = { dim = $TrainROILabelDim$ ; format = "dense" } }
        }:{
            type = "ImageDeserializer" ; module = "ImageReader"
            file="$dataDir$/tv2012pad.txt"
            input = {
                features = { transforms = (
                    { type = "ScaleSide" ; target = $ImageW$ ; side = "max" }:
                    { type = "Pad" ; width = $ImageW$ ; height = $ImageH$; channels = $ImageC$; value = 114 }:
                    { type = "Transpose" }
                )}
                ignored={labelDim=1000}
            }
        })
    }
}

Test={
    action="test"
    minibatchSize=1

    # use this for write action
    # action="write"
    # outputPath="$OutputDir$/fastrcnnNetOutput"
    
    BrainScriptNetworkBuilder = {
        imageShape = $ImageH$:$ImageW$:$ImageC$        # 1000:1000:3
        labelShape = $NumLabels$:$NumTestROIs$         # 21:200
        ROIShape   = 4:$NumTestROIs$                   # 4:200

        # load network
        network = BS.Network.Load ("$modelPath$")
        clonedNet = BS.Network.CloneFunction ((network.features:network.rois), { z = network.z }, parameters="constant")

        features = Input (imageShape)
        roiLabels = Input (labelShape)
        rois = Input (ROIShape)

        z = clonedNet(features, rois).z
        
        ce = NewCrossEntropyWithSoftmax (roiLabels, z, axis=1)
        errs = ClassificationError(z, roiLabels, axis=1)
        
        featureNodes    = (features:rois)
        labelNodes      = (roiLabels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (z)
    }
    
    reader = {
        randomize = false
        verbosity = 2
        deserializers = ({
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/test2007pad_all.rois.txt"
            input = { rois = { dim = $TestROIDim$ ; format = "dense" } }
        }:{
            type = "CNTKTextFormatDeserializer" ; module = "CNTKTextFormatReader"
            file = "$dataDir$/test2007pad_all.roilabels.txt"
            input = { roiLabels = { dim = $TestROILabelDim$ ; format = "dense" } }
        }:{
            type = "ImageDeserializer" ; module = "ImageReader"
            file="$dataDir$/test2007pad_all.txt"
            input = {
                features = { transforms = (
                    { type = "ScaleSide" ; target = $ImageW$ ; side = "max" }:
                    { type = "Pad" ; width = $ImageW$ ; height = $ImageH$; channels = $ImageC$; value = 114 }:
                    { type = "Transpose" }
                )}
                ignored={labelDim=1000}
            }
        })
    }
}
